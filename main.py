import json
from pyrogram import Client, filters
from pyrogram.types import Message
from decouple import config
from datetime import datetime, timedelta
import pytz
import random
import pymongo
import asyncio

bot = Client(
    name=config("LOGIN"),
    api_id=config("API_ID"),
    api_hash=config("API_HASH"),
    phone_number=config("PHONE"),
)

connection_uri = config("MONGO_URL")
client = pymongo.MongoClient(connection_uri)
db = client.kokbot
users = db.users

DUEL_REQUESTS = {}
DUEL_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

PREMIUM_EMOJI = {
    "eggplant": "<emoji id=5267172356501039375>üçÜ</emoji>"
}


def get_today_date():
    moscow_tz = pytz.timezone("Europe/Moscow")
    moscow_time = datetime.now(moscow_tz)
    return moscow_time.strftime("%Y-%m-%d")


def get_user(user_id):
    return users.find_one({"userId": user_id})


def register_user(user_id):
    find_user_len_in_oldBase = find_user_by_id(user_id)

    post = {}

    if find_user_len_in_oldBase:
        post = {
            "userId": user_id,
            "lastPlayDate": "1970-01-01",
            "len": find_user_len_in_oldBase,
            "chats": [],
            "fimos_end": "1970-01-01",
            "lastDuelDate": "1970-01-01",
        }

    else:
        post = {
            "userId": user_id,
            "lastPlayDate": "1970-01-01",
            "len": 0,
            "chats": [],
            "fimos_end": "1970-01-01",
            "lastDuelDate": "1970-01-01",
        }

    users.insert_one(post)


def update_user(user_id, new_len, fimos_end=None, last_duel_date=None):
    update_data = {"$set": {"lastPlayDate": get_today_date(), "len": new_len}}
    if fimos_end:
        update_data["$set"]["fimos_end"] = fimos_end
    if last_duel_date:
        update_data["$set"]["lastDuelDate"] = last_duel_date
    users.update_one({"userId": user_id}, update_data)


def add_chat_to_user(user_id, chat_id):
    if chat_id < 0:
        user = get_user(user_id)
        if "chats" not in user:
            users.update_one({"userId": user_id}, {"$set": {"chats": [chat_id]}})
        elif chat_id not in user["chats"]:
            user["chats"].append(chat_id)
            users.update_one({"userId": user_id}, {"$set": {"chats": user["chats"]}})


def get_top_users(chat_id, limit=50):
    top_users = list(users.find({}).sort("len", pymongo.DESCENDING).limit(limit))
    chat_users = [user for user in top_users if "chats" in user and chat_id in user["chats"]]
    return chat_users


def get_global_top_users(limit=50):
    return list(users.find().sort("len", pymongo.DESCENDING).limit(limit))


def get_user_rank(user_id, chat_id):
    all_users = list(users.find({}).sort("len", pymongo.DESCENDING))
    chat_users = [user for user in all_users if "chats" in user and chat_id in user["chats"]]
    for index, user in enumerate(chat_users):
        if user["userId"] == user_id:
            return index + 1
    return None


def get_global_user_rank(user_id):
    all_users = list(users.find().sort("len", pymongo.DESCENDING))
    for index, user in enumerate(all_users):
        if user["userId"] == user_id:
            return index + 1
    return None


def is_fimos(user):
    if user is None:
        return False
    return user["fimos_end"] > get_today_date()


def get_fimos_end_date():
    moscow_tz = pytz.timezone("Europe/Moscow")
    moscow_time = datetime.now(moscow_tz)
    fimos_end = moscow_time + timedelta(days=3)
    return fimos_end.strftime("%Y-%m-%d")


async def cleanup_duel_requests():
    now = datetime.now()
    expired_requests = [req_id for req_id, req_data in DUEL_REQUESTS.items() if (now - req_data["timestamp"]).total_seconds() > DUEL_TIMEOUT]
    for req_id in expired_requests:
        req_data = DUEL_REQUESTS.pop(req_id)
        try:
            duel_user_obj = await bot.get_users(req_data["duel_user_id"])
            user_obj = await bot.get_users(req_data["user_id"])
            await bot.send_message(req_data["chat_id"], f"‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥—É—ç–ª–∏ –æ—Ç <a href='tg://user?id={req_data['user_id']}'>{user_obj.first_name}</a> –∫ <a href='tg://user?id={req_data['duel_user_id']}'>{duel_user_obj.first_name}</a> –∏—Å—Ç–µ–∫–ª–æ.", disable_notification=True)
        except Exception:
            pass


def get_users_duel_today(chat_id):
    all_users = list(users.find({}))
    chat_users = [user for user in all_users if "chats" in user and chat_id in user["chats"] and user["lastDuelDate"] == get_today_date()]
    return chat_users


@bot.on_message(filters.command(["id", "–∞–π–¥–∏"]))
async def command_handler(client: Client, message: Message):
    await message.reply(message.from_user.id)


@bot.on_message(filters.command(["kok", "–∫–æ–∫"]))
async def command_handler(client: Client, message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user = get_user(user_id)

    if user is None:
        register_user(user_id)
        user = get_user(user_id)

    add_chat_to_user(user_id, chat_id)

    if user["lastPlayDate"] == get_today_date():
        await message.reply(f"‚è∞ –¢—ã —É–∂–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è. –¢–≤–æ–π –∫–æ–∫: <b>{user['len']}</b> —Å–º")
    else:
        current_len = user["len"]
        change = 0
        fimos = is_fimos(user)
        fimos_message = ""

        if fimos:
            if random.random() < 0.5:  # 50% —à–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–∏ —Ñ–∏–º–æ–∑–µ
                change = -random.randint(1, 5)
            else:
                change = random.randint(1, 5)

            if change > 0:
                fimos_message = f"\n‚ö†Ô∏è –ò–∑-–∑–∞ —Ñ–∏–º–æ–∑–∞ —Ç–≤–æ–π –∫–æ–∫ –≤—ã—Ä–æ—Å –≤—Å–µ–≥–æ –Ω–∞ <b>{change}</b> —Å–º."
            elif change < 0:
                fimos_message = f"\n‚ö†Ô∏è –ò–∑-–∑–∞ —Ñ–∏–º–æ–∑–∞ —Ç–≤–æ–π –∫–æ–∫ —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ <b>{abs(change)}</b> —Å–º."

        elif current_len > 50:
            if random.random() < 0.33:  # 33% —à–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω–∏—è
                change = -random.randint(1, 5)
            else:  # 67% —à–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω–∏—è
                change = random.randint(1, 10)
        else:
            change = random.randint(1, 10)

        if change == 0:
            change = random.choice([-random.randint(1, 3), random.randint(1, 3)])

        new_len = current_len + change
        fimos_end = None

        if current_len > 50 and random.random() < 0.03 and not fimos:
            fimos_end = get_fimos_end_date()
            fimos_message = f"\nüò± –£ —Ç–µ–±—è —Ñ–∏–º–æ–∑! –û–Ω –ø—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ: <b>{fimos_end}</b>."

        update_user(user_id, new_len, fimos_end)

        if change > 0 and not fimos:
            await message.reply(f"{PREMIUM_EMOJI['eggplant']} –¢–≤–æ–π –∫–æ–∫ –≤—ã—Ä–æ—Å –Ω–∞ <b>{change}</b> —Å–º –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{new_len}</b> —Å–º.{fimos_message}")
        elif change < 0 and not fimos:
            await message.reply(f"{PREMIUM_EMOJI['eggplant']} –¢–≤–æ–π –∫–æ–∫ —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ <b>{abs(change)}</b> —Å–º –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{new_len}</b> —Å–º.{fimos_message}")
        elif fimos:
            await message.reply(f"{PREMIUM_EMOJI['eggplant']} –¢–≤–æ–π –∫–æ–∫ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{new_len}</b> —Å–º.{fimos_message}")


@bot.on_message(filters.command(["top", "—Ç–æ–ø"]))
async def top_handler(client: Client, message: Message):
    chat_id = message.chat.id
    if chat_id > 0:
        await message.reply(f"üë• –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –≤ –∫–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
        return

    top_users = get_top_users(chat_id)

    if not top_users:
        await message.reply("ü§∑‚Äç‚ôÇÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª.")
        return

    duel_users_today = get_users_duel_today(chat_id)

    top_text = "üèÜ <b>–¢–æ–ø –∫–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:</b>\n"
    for i, user in enumerate(top_users):
        user_obj = await client.get_users(user["userId"])
        duel_mark = " ‚öîÔ∏è" if user in duel_users_today else ""
        top_text += f"<b>{i + 1}.</b> {user_obj.first_name} - <b>{user['len']}</b> —Å–º{duel_mark}\n"

    user_rank = get_user_rank(message.from_user.id, chat_id)
    if user_rank:
        top_text += f"\nüèÖ –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: <b>{user_rank}</b>"

    await message.reply(top_text)


@bot.on_message(filters.command(["top_global", "—Ç–æ–ø_–≥–ª–æ–±–∞–ª—å–Ω—ã–π"]))
async def global_top_handler(client: Client, message: Message):
    top_users = get_global_top_users()
    if not top_users:
        await message.reply("ü§∑‚Äç‚ôÄÔ∏è –ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª.")
        return
    top_text = "üåç <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∫–æ–∫–æ–≤:</b>\n"

    for i, user in enumerate(top_users):
        top_text += f"<b>{i + 1}.</b> ID: <code>{user['userId']}</code> - <b>{user['len']}</b> —Å–º\n"

    user_rank = get_global_user_rank(message.from_user.id)
    if user_rank:
        top_text += f"\nüèÖ –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ç–æ–ø–µ: <b>{user_rank}</b>"
    await message.reply(top_text)


@bot.on_message(filters.command(["help", "–ø–æ–º–æ—â—å"]))
async def help_handler(client: Client, message: Message):
    help_text = f"""
<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>

{PREMIUM_EMOJI['eggplant']} <code>/kok</code> (–∏–ª–∏ <code>/–∫–æ–∫</code>) - –ò–≥—Ä–∞—Ç—å –≤ –∫–æ–∫. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –≤–∞—à–µ–≥–æ –∫–æ–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ. –ú–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.

üèÜ <code>/top</code> (–∏–ª–∏ <code>/—Ç–æ–ø</code>) - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∫–æ–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ –∏ –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é.

üåç <code>/top_global</code> (–∏–ª–∏ <code>/—Ç–æ–ø_–≥–ª–æ–±–∞–ª—å–Ω—ã–π</code>) - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∫–æ–∫–æ–≤ –∏ –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é –≤ –Ω–µ–º.

üÜî <code>/id</code> (–∏–ª–∏ <code>/–∞–π–¥–∏</code>) - –ü–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–∞—à –∞–π–¥–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.

‚öîÔ∏è <code>/duel @username</code> - –í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å. –ú–æ–∂–Ω–æ –¥—Ä–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.

‚úÖ <code>/accept_duel</code> - –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥—É—ç–ª–∏.
‚ùå <code>/decline_duel</code> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥—É—ç–ª–∏.

üë§ <code>/profile</code> - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.

‚ùì <code>/help</code> (–∏–ª–∏ <code>/–ø–æ–º–æ—â—å</code>) - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥.

<a href="https://mvory9.github.io/kok-userbot-tg/">–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ GitHub Pages</a>
<a href="https://github.com/Mvory9/kok-userbot-tg/">–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub (+ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥)</a>
<a href="https://github.com/Mvory9/kok-userbot-tg/issues">–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é</a>
"""
    await message.reply(help_text, disable_web_page_preview=True)


@bot.on_message(filters.command(["duel", "–¥—É—ç–ª—å"]))
async def duel_handler(client: Client, message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if is_fimos(user):
        await message.reply("üòî –£ —Ç–µ–±—è —Ñ–∏–º–æ–∑, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª—è—Ö.")
        return

    if user["lastDuelDate"] == get_today_date():
        await message.reply("‚öîÔ∏è –¢—ã —É–∂–µ –¥—Ä–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
        return

    if user["len"] < 50:
        await message.reply("‚öîÔ∏è –¢—ã –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –¥—É—ç–ª–µ–π. –¢–≤–æ–π –∫–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 50 —Å–º.")
        return

    if not message.reply_to_message and not message.command[1:]:
        await message.reply("‚öîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º/ID")
        return

    duel_user_id = None
    if message.reply_to_message:
        duel_user_id = message.reply_to_message.from_user.id
    else:
        try:
            duel_user_id = int(message.command[1]) if message.command[1].isdigit() else (await client.get_users(message.command[1])).id
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞/ID.")
            return
        except Exception as e:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    if user_id == duel_user_id:
        await message.reply("ü§® –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å.")
        return

    if message.reply_to_message and message.chat.id != message.reply_to_message.chat.id:
        await message.reply("ü§® –î—É—ç–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ")
        return

    duel_user = get_user(duel_user_id)
    if duel_user is None:
        await message.reply("üôÖ‚Äç‚ôÄÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª.")
        return

    if is_fimos(duel_user):
        await message.reply("üòî –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª—è—Ö, —É –Ω–µ–≥–æ —Ñ–∏–º–æ–∑.")
        return

    if duel_user["len"] < 50:
        await message.reply("‚öîÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –¥—É—ç–ª–µ–π. –ï–≥–æ –∫–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 50 —Å–º.")
        return

    if user["lastPlayDate"] != get_today_date() or duel_user["lastPlayDate"] != get_today_date():
        await message.reply("‚è∞ –¢—ã –∏–ª–∏ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –∏–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥—Ä–∞—Ç—å—Å—è.")
        return

    if duel_user["lastDuelDate"] == get_today_date():
        duel_user_obj = await client.get_users(duel_user_id)
        await message.reply(f"‚öîÔ∏è {duel_user_obj.first_name} —É–∂–µ –¥—Ä–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
        return

    for req_id, req_data in DUEL_REQUESTS.items():
        if req_data["duel_user_id"] == duel_user_id:
            duel_user_obj = await client.get_users(duel_user_id)
            await message.reply(f"‚öîÔ∏è {duel_user_obj.first_name} —É–∂–µ –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å. –î–æ–∂–¥–∏—Å—å –ø–æ–∫–∞ –æ–Ω –ø—Ä–∏–º–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç –µ—ë.")
            return

    request_id = f"{user_id}_{duel_user_id}"
    DUEL_REQUESTS[request_id] = {
        "user_id": user_id,
        "duel_user_id": duel_user_id,
        "timestamp": datetime.now(),
        "chat_id": message.chat.id,
    }
    duel_user_obj = await client.get_users(duel_user_id)
    await message.reply(f"‚öîÔ∏è {duel_user_obj.first_name}, –í–∞—Å –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/accept_duel</code> –∏–ª–∏ <code>/decline_duel</code> –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏.")


@bot.on_message(filters.command(["accept_duel"]))
async def accept_duel_handler(client: Client, message: Message):
    user_id = message.from_user.id

    await cleanup_duel_requests()

    request_id = None
    for req_id, req_data in DUEL_REQUESTS.items():
        if req_data["duel_user_id"] == user_id:
            request_id = req_id
            break

    if not request_id:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥—É—ç–ª—å –¥–ª—è –í–∞—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª.")
        return

    request_data = DUEL_REQUESTS[request_id]
    user_id = request_data["user_id"]
    duel_user_id = request_data["duel_user_id"]

    user = get_user(user_id)
    duel_user = get_user(duel_user_id)

    if is_fimos(user) or is_fimos(duel_user):
        await message.reply("–û–¥–∏–Ω –∏–∑ –í–∞—Å –∏–º–µ–µ—Ç —Ñ–∏–º–æ–∑, –¥—É—ç–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        del DUEL_REQUESTS[request_id]
        return

    if user["lastDuelDate"] == get_today_date() or duel_user["lastDuelDate"] == get_today_date():
        await message.reply("–û–¥–∏–Ω –∏–∑ –í–∞—Å —É–∂–µ –¥—Ä–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, –¥—É—ç–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        del DUEL_REQUESTS[request_id]
        return

    duel_change = 10
    user_change = -5

    if random.random() < 0.5:
        duel_change, user_change = user_change, duel_change

    new_len_user = user["len"] + user_change
    new_len_duel = duel_user["len"] + duel_change

    update_user(user_id, new_len_user, last_duel_date=get_today_date())
    update_user(duel_user_id, new_len_duel, last_duel_date=get_today_date())

    user_obj = await client.get_users(user_id)
    duel_user_obj = await client.get_users(duel_user_id)

    await message.reply(f"‚öîÔ∏è –î—É—ç–ª—å –º–µ–∂–¥—É {user_obj.first_name} –∏ {duel_user_obj.first_name}!\n\n" f"üí™ {user_obj.first_name} {'–ø–æ—Ç–µ—Ä—è–ª' if user_change < 0 else '–ø–æ–ª—É—á–∏–ª'} {abs(user_change)} —Å–º. –¢–µ–ø–µ—Ä—å –µ–≥–æ –∫–æ–∫: {new_len_user} —Å–º.\n" f"üí™ {duel_user_obj.first_name} {'–ø–æ—Ç–µ—Ä—è–ª' if duel_change < 0 else '–ø–æ–ª—É—á–∏–ª'} {abs(duel_change)} —Å–º. –¢–µ–ø–µ—Ä—å –µ–≥–æ –∫–æ–∫: {new_len_duel} —Å–º.")
    del DUEL_REQUESTS[request_id]


@bot.on_message(filters.command(["decline_duel"]))
async def decline_duel_handler(client: Client, message: Message):
    user_id = message.from_user.id

    await cleanup_duel_requests()

    request_id = None
    for req_id, req_data in DUEL_REQUESTS.items():
        if req_data["duel_user_id"] == user_id:
            request_id = req_id
            break

    if not request_id:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥—É—ç–ª—å –¥–ª—è –í–∞—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª.")
        return

    request_data = DUEL_REQUESTS[request_id]
    user_obj = await client.get_users(request_data["user_id"])

    await message.reply(f"‚ùå {user_obj.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å.")
    del DUEL_REQUESTS[request_id]


@bot.on_message(filters.command(["profile", "–ø—Ä–æ—Ñ–∏–ª—å"]))
async def profile_handler(client: Client, message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user is None:
        await message.reply("ü§∑‚Äç‚ôÄÔ∏è –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏.")
        return

    fimos = is_fimos(user)
    fimos_message = ""
    if fimos:
        fimos_message = f"\n‚ö†Ô∏è –£ –í–∞—Å —Ñ–∏–º–æ–∑ –¥–æ: {user['fimos_end']}"

    duel_date = user['lastDuelDate']
    duel_message = ""
    if duel_date != "1970-01-01":
        duel_message = f"\n‚öîÔ∏è –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥—É—ç–ª–∏: <b>{user['lastDuelDate']}</b>"

    await message.reply(f"üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n" f"üìè –î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ –∫–æ–∫–∞: <b>{user['len']}</b> —Å–º\n" f"üìÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã: <b>{user['lastPlayDate']}</b>\n" f"{duel_message}{fimos_message}")


def find_user_by_id(target_user_id):
    with open("kok.users.json", 'r', encoding='utf-8') as file:
        data = json.load(file)
    
    for user in data:
        user_id = user['userId']
        if isinstance(user_id, dict) and '$numberLong' in user_id:
            user_id = int(user_id['$numberLong'])
        elif isinstance(user_id, int):
            pass  # –£–∂–µ —á–∏—Å–ª–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        else:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        if user_id == target_user_id:
            return user['len']
    
    return False
    

async def main():
    while True:
        await asyncio.sleep(10)
        await cleanup_duel_requests()


if __name__ == "__main__":
    bot.loop.create_task(main())
    bot.run()